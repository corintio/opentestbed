package game;

import static org.junit.Assert.assertEquals;
import game.deck.Deck;
import game.deck.MockDeck;

import org.apache.commons.io.IOUtils;
import org.junit.Test;

import bots.BotLoggingDecorator;
import bots.demobots.AlwaysCallBot;

import com.biotools.meerkat.Action;
import com.biotools.meerkat.GameInfo;

/**
 * Tests the workings of the Dealer class
 *
 */
public class DealerTest {

	/**
	 * Tests that dealing a hand produces the right events
	 * to GameObservers/Players<br>
	 * The hand we play here was run in PokerAcademy, events that need
	 * to be generated were 'recorded' with a LoggingBot so we test
	 * for the same events and order
	 * @throws Exception
	 */
	@Test
	public void testGameEventsForPlayer() throws Exception {
		Deck deck = new MockDeck(new String[] { "Jh 9h 2h 3c 5h" }, new String[] { "As Ks|2s 8d|8h Qc" });
		PublicGameInfo gameInfo = new PublicGameInfo();
		gameInfo.setNumSeats(3);
		gameInfo.setPlayer(0, PublicPlayerInfo.create("player1", 200, new FirstRaiseBot()));
		gameInfo.setPlayer(1, PublicPlayerInfo.create("player2", 200, new AlwaysCallBot()));
		BotLoggingDecorator botLog=new BotLoggingDecorator(new AlwaysCallBot());
		gameInfo.setPlayer(2, PublicPlayerInfo.create("player3", 200, botLog));
		gameInfo.setBlinds(0.05, 0.10);

		Dealer dealer = new Dealer(deck, gameInfo);
		dealer.playHand();

		String playerLog = IOUtils.toString(this.getClass().getResourceAsStream("./playerTestLog1.txt")).replace("\r", "");
		assertEquals(playerLog, botLog.getLog());
	}

	/**
	 * simple Testbot, whose first action is to raise
	 *
	 */
	class FirstRaiseBot extends AlwaysCallBot {
		private int counter = 0;
		private GameInfo gameInfo;

		@Override
		public void gameStartEvent(GameInfo gInfo) {
			this.gameInfo = gInfo;
			super.gameStartEvent(gInfo);
		}

		@Override
		public Action getAction() {
			if (counter++ == 0) {
				return Action.raiseAction(gameInfo, 0.1);
			}
			return super.getAction();
		}
	}

}
