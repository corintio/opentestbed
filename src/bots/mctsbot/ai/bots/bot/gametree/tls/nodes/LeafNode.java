package bots.mctsbot.ai.bots.bot.gametree.tls.nodes;

import java.util.ArrayList;
import java.util.List;

import bots.mctsbot.ai.bots.bot.gametree.action.SearchBotAction;
import bots.mctsbot.ai.bots.bot.gametree.tls.SimulatedGame;
import bots.mctsbot.ai.bots.bot.gametree.tls.metatree.TLSTree;
import bots.mctsbot.ai.bots.bot.gametree.tls.tests.Test;
import bots.mctsbot.ai.bots.util.RunningStats;

public class LeafNode extends AbstractTLSNode {

	public TLSTree childTree;
	private List<Test> possibleTests = null;
	private List<SearchBotAction> samples = new ArrayList<SearchBotAction>();

	public LeafNode(AbstractTLSNode parent, TLSTree tree, RunningStats stats) {
		super(parent, tree, stats);
	}

	public void expand() {
		//TODO:FIX EXPANSION
		//childTree = new TLSTree(this.getTree().getPlayer(), this);
	}

	public LeafNode selectRecursively() {
		if (childTree == null)
			return this;
		return childTree.selectRecursively();
	}

	public SimulatedGame simulate() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void backPropagate(SimulatedGame game) {
		if (possibleTests == null) {
			samples.add(game.peek());
			if (timeToGenerateTests())
				generateTests();
		}
		if (possibleTests != null) {
			for (Test test : possibleTests) {
				test.updateStats(game.peek(), game.getValue());
			}
			if (needsToBeSplit())
				split();
		}
		super.backPropagate(game);
	}

	private void generateTests() {
		// TODO Auto-generated method stub
		possibleTests = new ArrayList<Test>();
	}

	private boolean timeToGenerateTests() {
		return samples.size() > 10;
	}

	private void split() {
		Test test = getBestTest();
		LeafNode leftChild = new LeafNode(this.getParent(), getTree(), test.getLeftStats());
		LeafNode rightChild = new LeafNode(this.getParent(), getTree(), test.getRightStats());

		if (getParent().getRightChild() == null)
			((RootNode) getParent()).introduceSplit(test, leftChild, rightChild);
		else {
			InnerNode newNode = new InnerNode(getParent(), getTree(), test, this.backPropagationStrategy.getRunningStats());
			newNode.leftChild = leftChild;
			newNode.rightChild = rightChild;
			getParent().replaceNode(this, newNode);
		}
	}

	private Test getBestTest() {
		// TODO Auto-generated method stub
		return null;
	}

	private boolean needsToBeSplit() {
		return getNbSamples() > 30;
	}
}
