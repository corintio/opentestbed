package bots.mctsbot.ai.bots.bot.gametree.tls.nodes;

import java.util.ArrayList;
import java.util.List;

import bots.mctsbot.ai.bots.bot.gametree.action.SearchBotAction;
import bots.mctsbot.ai.bots.bot.gametree.tls.SimulatedGame;
import bots.mctsbot.ai.bots.bot.gametree.tls.strategies.selection.SelectionStrategy;
import bots.mctsbot.ai.bots.bot.gametree.tls.tests.Test;

public abstract class AbstractTLSNode {

	protected AbstractTLSNode leftChild;
	protected AbstractTLSNode rightChild;

	private int nbSamples = 0;

	private List<Test> possibleTests = new ArrayList<Test>();

	public AbstractTLSNode(AbstractTLSNode parent) {
		this.parent = parent;
	}

	private final AbstractTLSNode parent;

	public AbstractTLSNode getLeftChild() {
		return leftChild;
	}

	public AbstractTLSNode getRightChild() {
		return rightChild;
	}

	public abstract AbstractTLSNode selectChild(SelectionStrategy strategy);

	public AbstractTLSNode getParent() {
		return parent;
	}

	public void backPropagate(double value, SimulatedGame game) {
		SearchBotAction action = game.pop();
		if (!isSplit()) {
			for (Test test : possibleTests) {
				test.updateStats(action, value);
			}
		}
	}

	protected boolean isSplit() {
		return rightChild != null;
	}

	/**
	 * For now when a node is split, all information down the tree is lost.
	 */
	public void split() {
		leftChild = new LeafNode(getParent());
		rightChild = new LeafNode(getParent());
	}

	public int getNbSamples() {
		return nbSamples;
	}

	public double getEVStdDev() {
		// TODO Auto-generated method stub
		return 0;
	}

	public double getEV() {
		// TODO Auto-generated method stub
		return 0;
	}

}
