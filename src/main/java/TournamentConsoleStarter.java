import bots.BotRepository;
import game.*;
import game.deck.DeckFactory;
import game.deck.SerializedDeck;
import game.tournament.TournamentRank;
import game.tournament.TournamentGameDescription;
import game.tournament.TournmentTableSeater;

import java.io.FileWriter;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;


/**
 * This class starts a simulation on the console and writes a handhistory-file
 * to the ./data directory
 */
public class TournamentConsoleStarter {
    public static void main(String[] args) throws Exception {

        // number of games
        int numGames = 5000;
        // if to permute seats to reduce variance
        boolean permuteSeats = true;
        // four Bots fight against each other
        // valid BotNames can be obtained from the botRepository
        String[] botNames = new String[50];

        for (int i = 0; i < botNames.length; i++) {
            botNames[i] = "DemoBot/SimpleBot";
        }

        BotRepository botRepository = new BotRepository();
        TableSeater tableSeater = new TournmentTableSeater(botRepository);
        GameIDGenerator gameIDGenerator = new GameIDGenerator(System.nanoTime());

        HandHistoryWriter handHistoryWriter = new HandHistoryWriter();
        String simulationFileName = new SimpleDateFormat("yyMMdd-HHmm").format(new Date());
        handHistoryWriter.setWriter(new FileWriter("./data/" + simulationFileName + "-history.txt"));

        TournamentRank rank = new TournamentRank();

        TournamentGameDescription tournament = new TournamentGameDescription();
        tournament.setSmallBlind(0.01);
        tournament.setBigBlind(0.02);
        tournament.setInitialBankRoll(2);
//        tournament.setEstimatedNumGames(numGames);

        tournament.setBotNames(botNames);

        // start the game
        GameRunner runner = tournament.createGameRunner();
//        BankrollGraphUI bankrollgraphUI = new BankrollGraphUI();
//        runner.addBankrollObserver(bankrollgraphUI);
        DeckFactory deckFactory = SerializedDeck.createFactory("./data/decks/deck-100000.deck");
        runner.runGame(deckFactory, tableSeater, gameIDGenerator, Arrays.asList(handHistoryWriter, rank));

//        bankrollgraphUI.createGraph(simulationFileName);
    }
}
