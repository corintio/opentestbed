package game;

import bots.BotRepository;

import com.biotools.meerkat.Player;

/**
 * A tableseater puts bots on a table. As this is the same for 
 * tournaments and cashgames it has been extraced to this class.<br>
 * Furthermore this class (in the future) will be able to create
 * permutations of the seats to reduce variance in the simulations.
 *  
 *
 */
public class TableSeater {
	private BotRepository botRepository;
	/**
	 * if seats should be permuted. Currently only works for even seat-counts 
	 * to be unbiased. See http://pokerai.org/pf3/viewtopic.php?f=3&t=3272 to
	 * see how permutations are created
	 */
	private boolean permuteSeats;

	/**
	 * 
	 * @param botRepository
	 * @param permuteSeats only works for even seat-counts
	 */
	public TableSeater(BotRepository botRepository, boolean permuteSeats) {
		super();
		this.botRepository = botRepository;
		this.permuteSeats = permuteSeats;
	}

	/**
	 * creates Tables (a.k.a {@link PublicGameInfo}s with the players/bots according to
	 * a gameDescription. <br>
	 * {@link PublicPlayerInfo}s will get their initial bankroll, name and bot assigned
	 * @param gameDescription
	 * @param permuteSeats
	 * @return an array of PublicGameInfos with the bots seated around the table.
	 * Currently just one entry is returned, but in the future we will generate
	 * permutation of the seating order
	 */
	public PublicGameInfo[] createTables(AbstractGameDescription gameDescription) {
		int[][] seatPermutations = createSeatPermutations(gameDescription);
		PublicGameInfo[] createdGameInfos = new PublicGameInfo[seatPermutations.length];

		for (int gamePermutation = 0; gamePermutation < seatPermutations.length; gamePermutation++) {
			PublicGameInfo publicGameInfo = new PublicGameInfo();
			createdGameInfos[gamePermutation] = publicGameInfo;

			publicGameInfo.setNumSeats(gameDescription.getNumSeats());

			for (int seat = 0; seat < gameDescription.getNumSeats(); seat++) {
				if (gameDescription.getBotNames()[seat] != null) {
					int targetBot=seatPermutations[gamePermutation][seat];
					
					Player bot = botRepository.createBot(gameDescription.getBotNames()[targetBot]);
					PublicPlayerInfo playerInfo = new PublicPlayerInfo();
					playerInfo.setBankroll(gameDescription.getInitialBankRoll());
					playerInfo.setBot(bot);
					playerInfo.setName(gameDescription.getInGameNames()[targetBot]);
					publicGameInfo.setPlayer(seat, playerInfo);
				}
			}

		}

		return createdGameInfos;
	}

	private int[][] createSeatPermutations(AbstractGameDescription gameDescription) {
		int numSeats=gameDescription.getBotNames().length;
		if (permuteSeats && !(numSeats == 4 || numSeats == 6)) {
			throw new IllegalArgumentException("permutation currently only works with 4 or 6 seats");
		}
		int permutationCount = permuteSeats ? numSeats : 1;

		int[][] seatPermutations = new int[permutationCount][numSeats];
		for (int permutation = 0; permutation < permutationCount; permutation++) {
			for (int seat = 0; seat < numSeats; seat++) {
				seatPermutations[permutation][seat] = ((permutation + 1) * (seat + 1) % (numSeats + 1)) - 1;
			}
		}
		
		return seatPermutations;
	}

}
