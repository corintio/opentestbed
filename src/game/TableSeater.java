package game;

import bots.BotRepository;

import com.biotools.meerkat.Player;

/**
 * A tableseater puts bots on a table. As this is the same for 
 * tournaments and cashgames it has been extraced to this class.<br>
 * Furthermore this class (in the future) will be able to create
 * permutations of the seats to reduce variance in the simulations.
 *  
 *
 */
public class TableSeater {
	private BotRepository botRepository;

	public TableSeater(BotRepository botRepository) {
		super();
		this.botRepository = botRepository;
	}

	/**
	 * creates Tables (a.k.a {@link PublicGameInfo}s with the players/bots according to
	 * a gameDescription. <br>
	 * {@link PublicPlayerInfo}s will get their initial bankroll, name and bot assigned
	 * @param gameDescription
	 * @return an array of PublicGameInfos with the bots seated around the table.
	 * Currently just one entry is returned, but in the future we will generate
	 * permutation of the seating order
	 */
	public PublicGameInfo[] createTables(AbstractGameDescription gameDescription) {
		PublicGameInfo publicGameInfo=new PublicGameInfo();
		publicGameInfo.setNumSeats(gameDescription.getNumSeats());
		for (int seat = 0; seat < gameDescription.getNumSeats(); seat++) {
			if (gameDescription.getBotNames()[seat] != null) {
				Player bot = botRepository.createBot(gameDescription.getBotNames()[seat]);
				PublicPlayerInfo playerInfo = new PublicPlayerInfo();
				playerInfo.setBankroll(gameDescription.getInitialBankRoll());
				playerInfo.setBot(bot);
				playerInfo.setName(gameDescription.getInGameNames()[seat]);
				publicGameInfo.setPlayer(seat, playerInfo);
			}
		}
		return new PublicGameInfo[] { publicGameInfo };
	}
}
