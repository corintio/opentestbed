package game;

import java.util.List;

import com.biotools.meerkat.GameObserver;

/**
 * GameRunner running a CashGame<br>
 * Runs the given count of CashGames and automatically rebuys players based
 * an the configuration
 *
 */
public class CashGameRunner implements GameRunner {
	private CashGameDescription cashGameDescription;

	public CashGameRunner(CashGameDescription cashGameDescription) {
		super();
		this.cashGameDescription = cashGameDescription;
	}

	@Override
	public void runGame(Deck deck, TableSeater tableSeater, GameIDGenerator gameIDGenerator, List<? extends GameObserver> gameObservers) {
		PublicGameInfo gameInfos[] = tableSeater.createTables(cashGameDescription);
		for (PublicGameInfo gameInfo : gameInfos) {
			for (GameObserver gameObserver : gameObservers) {
				gameInfo.addGameObserver(gameObserver);
			}

			gameInfo.setBlinds(cashGameDescription.getSmallBlind(), cashGameDescription.getBigBlind());
			gameInfo.setLimit(cashGameDescription.isNolimit() ? PublicGameInfo.NO_LIMIT : PublicGameInfo.FIXED_LIMIT);
			Dealer dealer = new Dealer(deck, gameInfo);
			for (int i = 0; i < cashGameDescription.getNumGames(); i++) {
				gameInfo.setGameID(gameIDGenerator.getNextGameID());
				dealer.playHand();
				checkPlayerRebuy(gameInfo);
			}
		}
	}

	private void checkPlayerRebuy(PublicGameInfo gameInfo) {
		for (int seat=0;seat<gameInfo.getNumSeats();seat++) {
			PublicPlayerInfo player=gameInfo.getPlayer(seat);
			if (player != null && player.getBankRoll() < cashGameDescription.getMinStackBeforeRebuy()) {
				player.setBankroll(player.getBankRoll() + cashGameDescription.getRebuyAmount());
			}
		}
	}
}
