package game;

import java.io.IOException;
import java.io.Writer;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.biotools.meerkat.Action;
import com.biotools.meerkat.Card;
import com.biotools.meerkat.GameInfo;
import com.biotools.meerkat.GameObserver;

/**
 * A HandHistoryWriter observes a game and on a {@link #gameOverEvent()} writes a hand-history-file to a given {@link Writer} in Full-Till format.<br>
 * Please note that the format is not 100% FullTilt, but shortened to the most important information that importers (like PokerTracker and HoldemManager) need
 * for correct processing.
 */

public class HandHistoryWriter implements GameObserver {
	Logger log = Logger.getLogger(this.getClass().getName());

	private GameInfo gameInfo;
	private Writer outWriter;
	private StringBuffer currentHistory = new StringBuffer();
	private DecimalFormat moneyFormat = new DecimalFormat("0.00", new DecimalFormatSymbols(Locale.ENGLISH));

	public void setWriter(Writer outWriter) {
		this.outWriter = outWriter;
	}

	@Override
	public void actionEvent(int pos, Action act) {
		// TODO Auto-generated method stub
	}

	@Override
	public void dealHoleCardsEvent() {
		// TODO Auto-generated method stub
	}

	@Override
	public void gameOverEvent() {
		if (outWriter != null) {
			try {
				outWriter.write(currentHistory.toString());
				outWriter.flush();
			} catch (IOException e) {
				// currently we don't rethrow so to not disturb the game ?
				log.log(Level.SEVERE, "error writing handhistory", e);
			}
		} else {
			log.severe("no writer set, can't write HandHistory");
		}
		currentHistory = new StringBuffer();
	}

	@Override
	public void gameStartEvent(GameInfo gInfo) {
		this.gameInfo = gInfo;
		writeInitalGameInfo();
	}

	@Override
	public void gameStateChanged() {
	}

	@Override
	public void showdownEvent(int seat, Card c1, Card c2) {
	}

	@Override
	public void stageEvent(int stage) {
	}

	@Override
	public void winEvent(int pos, double amount, String handName) {
	}

	/**
	 * Writes the beginning Header
	 * 
	 * <pre>
	 * Full Tilt Poker Game #19342777650: Table Jay (shallow) - $0.01/$0.02 - No Limit Hold'em - 18:21:50 ET - 2010/03/17
	 * Seat 1: player1 ($0.33)
	 * Seat 3: player3 ($0.42)
	 * </pre>
	 * 
	 */
	private void writeInitalGameInfo() {
		// First line:
		// Full Tilt Poker Game #19342777650: Table Jay (shallow) - $0.01/$0.02 - No Limit Hold'em - 18:21:50 ET - 2010/03/17
		currentHistory.append("Full Tilt Poker Game #").append(gameInfo.getGameID());
		currentHistory.append(": Table OpenTestBed - $");
		currentHistory.append(moneyFormat.format(gameInfo.getSmallBlindSize()));
		currentHistory.append("/$");
		currentHistory.append(moneyFormat.format(gameInfo.getBigBlindSize()));
		currentHistory.append(" - ").append(gameInfo.isNoLimit()?"No ":gameInfo.isPotLimit()?"Pot ":"").append("Limit Hold'em");

		DateFormat dateFormat=new SimpleDateFormat("hh:mm:ss z - yyyy/MM/dd");
		currentHistory.append(" - ").append(dateFormat.format(getGameTime()));
		currentHistory.append("\n");

		if (gameInfo.isActive(9)) {
			throw new IllegalStateException("Full-Tilt format only supports 9 players, but 10 players are seated");
		}

		// Player Seats
		// Seat 1: player1 ($0.33)
		for (int playerId = 0; playerId < 9; playerId++) {
			if (gameInfo.isActive(playerId)) {
				currentHistory.append("Seat ").append(playerId+1).append(": ");
				currentHistory.append(gameInfo.getPlayerName(playerId));
				currentHistory.append(" ($").append(moneyFormat.format(gameInfo.getBankRoll(playerId))).append(")\n");
			}
		}
	}

	/**
	 * to be overridden by JUnit-Tests
	 * @return
	 */
	protected Date getGameTime() {
		return new Date();
	}

}
