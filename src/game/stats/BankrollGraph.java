package game.stats;

import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.swing.JFrame;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 * This BankrollObserver is able to draw a graph of the bankrolls with
 * JFreeChart.<br>
 * Register this class on a GameRunner and call {@link #createGraph()} in the end
 */
public class BankrollGraph implements BankrollObserver {

	private Map<Integer, List<Map<String, Double>>> stats = new HashMap<Integer, List<Map<String, Double>>>();
	private Set<String> playerNames;
	private int numSeatPermuations;
	private int numGames;

	
	@Override
	public void gameStarted(int numSeatPermutations, int numGames, Set<String> playerNames) {
		this.numGames = numGames;
		this.numSeatPermuations = numSeatPermutations;
		this.playerNames = playerNames;
	};

	@Override
	public void updateBankroll(int seatpermutation, Map<String, Double> playerDelta) {
		List<Map<String, Double>> permutationStats = stats.get(Integer.valueOf(seatpermutation));
		if (permutationStats==null) {
			permutationStats = new ArrayList<Map<String, Double>>();
			stats.put(Integer.valueOf(seatpermutation), permutationStats);
		}
		permutationStats.add(playerDelta);
	}

	/**
	 * creates the graph, saves it to the data-directory and popups a frame to show the results.<br>
	 * As JFreeChart is used for rendering, one can zoom and do some other
	 * nice things.
	 */
	public void createGraph(String chartName) {
		Map<String, Double> playerToBankRoll = new HashMap<String, Double>();
		Map<String, XYSeries> playerToXYSeries = new HashMap<String, XYSeries>();
		
		for (String playerName : playerNames) {
			playerToBankRoll.put(playerName, new Double(0));
			playerToXYSeries.put(playerName, new XYSeries(playerName));
		}

		calculateBankrolls(playerToBankRoll, playerToXYSeries);
		
		XYSeriesCollection xySeriesCollection = new XYSeriesCollection();
		for (XYSeries playerXYSeries : playerToXYSeries.values()) {
			xySeriesCollection.addSeries(playerXYSeries);
		}

		final JFreeChart chart = createChart(playerToBankRoll, xySeriesCollection);

		try {
			ChartUtilities.saveChartAsPNG(new File("./data/" + chartName + "-chart.png"), chart, 1000, 700);
		} catch (IOException e) {
			e.printStackTrace();
		}
		openChartInFrame(chart);
	}

	/**
	 * opens the chart in a frame
	 * @param chart
	 */
	private void openChartInFrame(final JFreeChart chart) {
		final ChartPanel chartPanel = new ChartPanel(chart);
		chartPanel.setPreferredSize(new java.awt.Dimension(1000, 500));

		JFrame frame = new JFrame("SimulationResults");
		frame.setSize(1000, 700);
		frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		frame.getContentPane().add(chartPanel);
		frame.setVisible(true);
	}

	/**
	 * creates a JFreeChart from all the data
	 * @param playerToBankRoll
	 * @param xySeriesCollection
	 * @return
	 */
	private JFreeChart createChart(Map<String, Double> playerToBankRoll, XYSeriesCollection xySeriesCollection) {
		final JFreeChart chart = ChartFactory.createXYLineChart("Bankroll after " + numSeatPermuations + " seat permutation(s)", "Games", "Bankroll",
				xySeriesCollection, PlotOrientation.VERTICAL, true, false, false);

		for (String playerName : playerNames) {
			double finalBankroll = playerToBankRoll.get(playerName);
			DecimalFormat moneyFormat = new DecimalFormat("0.00");
			String resultString = playerName + ": $" + moneyFormat.format(finalBankroll) + " ($"
					+ moneyFormat.format(finalBankroll / (numGames * numSeatPermuations / 100)) + "/100)";
			final XYPointerAnnotation pointer = new XYPointerAnnotation(resultString, numGames + 1, finalBankroll,
					Math.PI);
			pointer.setBaseRadius(20.0);
			pointer.setTipRadius(1.0);
			pointer.setLabelOffset(30.0);
			pointer.setOutlineVisible(true);
			pointer.setBackgroundPaint(Color.WHITE);
			chart.getXYPlot().addAnnotation(pointer);

		}
		return chart;
	}

	/**
	 * calculates the bankroll for each player (aggregating the results of all
	 * seatpermutations)
	 * @param playerToBankRoll
	 * @param playerToXYSeries
	 */
	private void calculateBankrolls(Map<String, Double> playerToBankRoll, Map<String, XYSeries> playerToXYSeries) {
		for (int game = 0; game < numGames; game++) {
			for (String playerName : playerNames) {
				double playerBankRoll = playerToBankRoll.get(playerName);

				for (int seatpermutation = 0; seatpermutation < numSeatPermuations; seatpermutation++) {
					playerBankRoll += stats.get(seatpermutation).get(game).get(playerName);
				}
				playerToBankRoll.put(playerName, Double.valueOf(playerBankRoll));
				playerToXYSeries.get(playerName).add(game + 1, playerBankRoll);
			}
		}
	}

}
