import game.CashGameDescription;
import game.GameIDGenerator;
import game.GameRunner;
import game.HandHistoryWriter;
import game.TableSeater;
import game.deck.SerializedDeck;
import game.stats.BankrollGraph;

import java.io.FileWriter;
import java.util.Arrays;

import bots.BotRepository;

/**
 * This class starts a simulation on the console and writes a handhistory-file
 * to the ./data directory
 */
public class CashGameConsoleStarter {
	public static void main(String[] args) throws Exception {
		BotRepository botRepository = new BotRepository();
		TableSeater tableSeater = new TableSeater(botRepository, false);
		GameIDGenerator gameIDGenerator = new GameIDGenerator(System.nanoTime());
		HandHistoryWriter handHistoryWriter = new HandHistoryWriter();
		String simulationFileName = Long.toString(System.nanoTime());
		handHistoryWriter.setWriter(new FileWriter("./data/" + simulationFileName + "-history.txt"));
		
		// created via GUI, persisted via XML to the ./data/games dir in the future
		CashGameDescription cashGameDescription = new CashGameDescription();
		cashGameDescription.setSmallBlind(0.01);
		cashGameDescription.setBigBlind(0.02);
		// four CallBots fight against each other
		// valid BotNames can be obtained from the botRepository
		cashGameDescription.setBotNames(new String[] { "DemoBot/SimpleBot", "DemoBot/SimpleBot", "DemoBot/AlwaysCallBot", "DemoBot/AlwaysCallBot" });
		cashGameDescription.setInGameNames(new String[] { "Simply #1", "Simply #2", "Cally #3", "Cally #4" });

		// Stack-handling
		cashGameDescription.setInitialBankRoll(2);
		cashGameDescription.setNumGames(2000);

		// start the game
		GameRunner runner = cashGameDescription.createGameRunner();
		BankrollGraph bankrollgraph = new BankrollGraph();
		runner.addBankrollObserver(bankrollgraph);
		runner.runGame(SerializedDeck.createFactory("./data/decks/deck-100000.deck"), tableSeater, gameIDGenerator, Arrays.asList(handHistoryWriter));


		bankrollgraph.createGraph(simulationFileName);
	}
}
